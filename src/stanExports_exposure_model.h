// Generated by rstantools.  Do not edit by hand.

/*
    bercs is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    bercs is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with bercs.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_exposure_model_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_exposure_model");
    reader.add_event(94, 92, "end", "model_exposure_model");
    return reader;
}
#include <stan_meta_header.hpp>
class model_exposure_model
  : public stan::model::model_base_crtp<model_exposure_model> {
private:
        int G;
        int K;
        int n;
        int N;
        int timedf;
        std::vector<int> group_of_obs;
        std::vector<int> cluster_of_obs;
        std::vector<int> unit_of_obs;
        std::vector<double> w;
        matrix_d Mt;
        double prior_etaG_mean;
        double prior_sigmaG_mean;
        double prior_sigmaG_sd;
        double prior_reK_mean;
        double prior_sigmaK_mean;
        double prior_sigmaK_sd;
        double prior_reI_mean;
        double prior_sigmaI_mean;
        double prior_sigmaI_sd;
        double prior_sigmaW_mean;
        double prior_sigmaW_sd;
        double prior_theta_mean;
        double prior_sigmaTheta_mean;
        double prior_sigmaTheta_sd;
public:
    model_exposure_model(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_exposure_model(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_exposure_model_namespace::model_exposure_model";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 7;
            context__.validate_dims("data initialization", "G", "int", context__.to_vec());
            G = int(0);
            vals_i__ = context__.vals_i("G");
            pos__ = 0;
            G = vals_i__[pos__++];
            check_greater_or_equal(function__, "G", G, 1);
            current_statement_begin__ = 8;
            context__.validate_dims("data initialization", "K", "int", context__.to_vec());
            K = int(0);
            vals_i__ = context__.vals_i("K");
            pos__ = 0;
            K = vals_i__[pos__++];
            check_greater_or_equal(function__, "K", K, 0);
            current_statement_begin__ = 9;
            context__.validate_dims("data initialization", "n", "int", context__.to_vec());
            n = int(0);
            vals_i__ = context__.vals_i("n");
            pos__ = 0;
            n = vals_i__[pos__++];
            check_greater_or_equal(function__, "n", n, 0);
            current_statement_begin__ = 10;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            check_greater_or_equal(function__, "N", N, 0);
            current_statement_begin__ = 11;
            context__.validate_dims("data initialization", "timedf", "int", context__.to_vec());
            timedf = int(0);
            vals_i__ = context__.vals_i("timedf");
            pos__ = 0;
            timedf = vals_i__[pos__++];
            check_greater_or_equal(function__, "timedf", timedf, 0);
            current_statement_begin__ = 13;
            validate_non_negative_index("group_of_obs", "N", N);
            context__.validate_dims("data initialization", "group_of_obs", "int", context__.to_vec(N));
            group_of_obs = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("group_of_obs");
            pos__ = 0;
            size_t group_of_obs_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < group_of_obs_k_0_max__; ++k_0__) {
                group_of_obs[k_0__] = vals_i__[pos__++];
            }
            size_t group_of_obs_i_0_max__ = N;
            for (size_t i_0__ = 0; i_0__ < group_of_obs_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "group_of_obs[i_0__]", group_of_obs[i_0__], 1);
                check_less_or_equal(function__, "group_of_obs[i_0__]", group_of_obs[i_0__], G);
            }
            current_statement_begin__ = 14;
            validate_non_negative_index("cluster_of_obs", "N", N);
            context__.validate_dims("data initialization", "cluster_of_obs", "int", context__.to_vec(N));
            cluster_of_obs = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("cluster_of_obs");
            pos__ = 0;
            size_t cluster_of_obs_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < cluster_of_obs_k_0_max__; ++k_0__) {
                cluster_of_obs[k_0__] = vals_i__[pos__++];
            }
            size_t cluster_of_obs_i_0_max__ = N;
            for (size_t i_0__ = 0; i_0__ < cluster_of_obs_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "cluster_of_obs[i_0__]", cluster_of_obs[i_0__], 0);
                check_less_or_equal(function__, "cluster_of_obs[i_0__]", cluster_of_obs[i_0__], K);
            }
            current_statement_begin__ = 15;
            validate_non_negative_index("unit_of_obs", "N", N);
            context__.validate_dims("data initialization", "unit_of_obs", "int", context__.to_vec(N));
            unit_of_obs = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("unit_of_obs");
            pos__ = 0;
            size_t unit_of_obs_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < unit_of_obs_k_0_max__; ++k_0__) {
                unit_of_obs[k_0__] = vals_i__[pos__++];
            }
            size_t unit_of_obs_i_0_max__ = N;
            for (size_t i_0__ = 0; i_0__ < unit_of_obs_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "unit_of_obs[i_0__]", unit_of_obs[i_0__], 1);
                check_less_or_equal(function__, "unit_of_obs[i_0__]", unit_of_obs[i_0__], n);
            }
            current_statement_begin__ = 17;
            validate_non_negative_index("w", "N", N);
            context__.validate_dims("data initialization", "w", "double", context__.to_vec(N));
            w = std::vector<double>(N, double(0));
            vals_r__ = context__.vals_r("w");
            pos__ = 0;
            size_t w_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < w_k_0_max__; ++k_0__) {
                w[k_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 18;
            validate_non_negative_index("Mt", "(logical_eq(timedf, 0) ? 0 : N )", (logical_eq(timedf, 0) ? 0 : N ));
            validate_non_negative_index("Mt", "timedf", timedf);
            context__.validate_dims("data initialization", "Mt", "matrix_d", context__.to_vec((logical_eq(timedf, 0) ? 0 : N ),timedf));
            Mt = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>((logical_eq(timedf, 0) ? 0 : N ), timedf);
            vals_r__ = context__.vals_r("Mt");
            pos__ = 0;
            size_t Mt_j_2_max__ = timedf;
            size_t Mt_j_1_max__ = (logical_eq(timedf, 0) ? 0 : N );
            for (size_t j_2__ = 0; j_2__ < Mt_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < Mt_j_1_max__; ++j_1__) {
                    Mt(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 21;
            context__.validate_dims("data initialization", "prior_etaG_mean", "double", context__.to_vec());
            prior_etaG_mean = double(0);
            vals_r__ = context__.vals_r("prior_etaG_mean");
            pos__ = 0;
            prior_etaG_mean = vals_r__[pos__++];
            current_statement_begin__ = 22;
            context__.validate_dims("data initialization", "prior_sigmaG_mean", "double", context__.to_vec());
            prior_sigmaG_mean = double(0);
            vals_r__ = context__.vals_r("prior_sigmaG_mean");
            pos__ = 0;
            prior_sigmaG_mean = vals_r__[pos__++];
            current_statement_begin__ = 23;
            context__.validate_dims("data initialization", "prior_sigmaG_sd", "double", context__.to_vec());
            prior_sigmaG_sd = double(0);
            vals_r__ = context__.vals_r("prior_sigmaG_sd");
            pos__ = 0;
            prior_sigmaG_sd = vals_r__[pos__++];
            check_greater_or_equal(function__, "prior_sigmaG_sd", prior_sigmaG_sd, 0);
            current_statement_begin__ = 24;
            context__.validate_dims("data initialization", "prior_reK_mean", "double", context__.to_vec());
            prior_reK_mean = double(0);
            vals_r__ = context__.vals_r("prior_reK_mean");
            pos__ = 0;
            prior_reK_mean = vals_r__[pos__++];
            current_statement_begin__ = 25;
            context__.validate_dims("data initialization", "prior_sigmaK_mean", "double", context__.to_vec());
            prior_sigmaK_mean = double(0);
            vals_r__ = context__.vals_r("prior_sigmaK_mean");
            pos__ = 0;
            prior_sigmaK_mean = vals_r__[pos__++];
            current_statement_begin__ = 26;
            context__.validate_dims("data initialization", "prior_sigmaK_sd", "double", context__.to_vec());
            prior_sigmaK_sd = double(0);
            vals_r__ = context__.vals_r("prior_sigmaK_sd");
            pos__ = 0;
            prior_sigmaK_sd = vals_r__[pos__++];
            check_greater_or_equal(function__, "prior_sigmaK_sd", prior_sigmaK_sd, 0);
            current_statement_begin__ = 27;
            context__.validate_dims("data initialization", "prior_reI_mean", "double", context__.to_vec());
            prior_reI_mean = double(0);
            vals_r__ = context__.vals_r("prior_reI_mean");
            pos__ = 0;
            prior_reI_mean = vals_r__[pos__++];
            current_statement_begin__ = 28;
            context__.validate_dims("data initialization", "prior_sigmaI_mean", "double", context__.to_vec());
            prior_sigmaI_mean = double(0);
            vals_r__ = context__.vals_r("prior_sigmaI_mean");
            pos__ = 0;
            prior_sigmaI_mean = vals_r__[pos__++];
            current_statement_begin__ = 29;
            context__.validate_dims("data initialization", "prior_sigmaI_sd", "double", context__.to_vec());
            prior_sigmaI_sd = double(0);
            vals_r__ = context__.vals_r("prior_sigmaI_sd");
            pos__ = 0;
            prior_sigmaI_sd = vals_r__[pos__++];
            check_greater_or_equal(function__, "prior_sigmaI_sd", prior_sigmaI_sd, 0);
            current_statement_begin__ = 30;
            context__.validate_dims("data initialization", "prior_sigmaW_mean", "double", context__.to_vec());
            prior_sigmaW_mean = double(0);
            vals_r__ = context__.vals_r("prior_sigmaW_mean");
            pos__ = 0;
            prior_sigmaW_mean = vals_r__[pos__++];
            current_statement_begin__ = 31;
            context__.validate_dims("data initialization", "prior_sigmaW_sd", "double", context__.to_vec());
            prior_sigmaW_sd = double(0);
            vals_r__ = context__.vals_r("prior_sigmaW_sd");
            pos__ = 0;
            prior_sigmaW_sd = vals_r__[pos__++];
            check_greater_or_equal(function__, "prior_sigmaW_sd", prior_sigmaW_sd, 0);
            current_statement_begin__ = 32;
            context__.validate_dims("data initialization", "prior_theta_mean", "double", context__.to_vec());
            prior_theta_mean = double(0);
            vals_r__ = context__.vals_r("prior_theta_mean");
            pos__ = 0;
            prior_theta_mean = vals_r__[pos__++];
            current_statement_begin__ = 33;
            context__.validate_dims("data initialization", "prior_sigmaTheta_mean", "double", context__.to_vec());
            prior_sigmaTheta_mean = double(0);
            vals_r__ = context__.vals_r("prior_sigmaTheta_mean");
            pos__ = 0;
            prior_sigmaTheta_mean = vals_r__[pos__++];
            current_statement_begin__ = 34;
            context__.validate_dims("data initialization", "prior_sigmaTheta_sd", "double", context__.to_vec());
            prior_sigmaTheta_sd = double(0);
            vals_r__ = context__.vals_r("prior_sigmaTheta_sd");
            pos__ = 0;
            prior_sigmaTheta_sd = vals_r__[pos__++];
            check_greater_or_equal(function__, "prior_sigmaTheta_sd", prior_sigmaTheta_sd, 0);
            // initialize transformed data variables
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 37;
            validate_non_negative_index("etaG_raw", "G", G);
            num_params_r__ += G;
            current_statement_begin__ = 38;
            validate_non_negative_index("reK_raw", "K", K);
            num_params_r__ += K;
            current_statement_begin__ = 39;
            validate_non_negative_index("reI_raw", "n", n);
            num_params_r__ += n;
            current_statement_begin__ = 40;
            validate_non_negative_index("theta_raw", "timedf", timedf);
            num_params_r__ += timedf;
            current_statement_begin__ = 41;
            num_params_r__ += 1;
            current_statement_begin__ = 42;
            validate_non_negative_index("sigmaK", "(logical_eq(K, 0) ? 0 : 1 )", (logical_eq(K, 0) ? 0 : 1 ));
            num_params_r__ += (1 * (logical_eq(K, 0) ? 0 : 1 ));
            current_statement_begin__ = 43;
            num_params_r__ += 1;
            current_statement_begin__ = 44;
            num_params_r__ += 1;
            current_statement_begin__ = 45;
            validate_non_negative_index("sigmaTheta", "(logical_eq(timedf, 0) ? 0 : 1 )", (logical_eq(timedf, 0) ? 0 : 1 ));
            num_params_r__ += (1 * (logical_eq(timedf, 0) ? 0 : 1 ));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_exposure_model() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 37;
        if (!(context__.contains_r("etaG_raw")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable etaG_raw missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("etaG_raw");
        pos__ = 0U;
        validate_non_negative_index("etaG_raw", "G", G);
        context__.validate_dims("parameter initialization", "etaG_raw", "vector_d", context__.to_vec(G));
        Eigen::Matrix<double, Eigen::Dynamic, 1> etaG_raw(G);
        size_t etaG_raw_j_1_max__ = G;
        for (size_t j_1__ = 0; j_1__ < etaG_raw_j_1_max__; ++j_1__) {
            etaG_raw(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(etaG_raw);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable etaG_raw: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 38;
        if (!(context__.contains_r("reK_raw")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable reK_raw missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("reK_raw");
        pos__ = 0U;
        validate_non_negative_index("reK_raw", "K", K);
        context__.validate_dims("parameter initialization", "reK_raw", "vector_d", context__.to_vec(K));
        Eigen::Matrix<double, Eigen::Dynamic, 1> reK_raw(K);
        size_t reK_raw_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < reK_raw_j_1_max__; ++j_1__) {
            reK_raw(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(reK_raw);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable reK_raw: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 39;
        if (!(context__.contains_r("reI_raw")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable reI_raw missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("reI_raw");
        pos__ = 0U;
        validate_non_negative_index("reI_raw", "n", n);
        context__.validate_dims("parameter initialization", "reI_raw", "vector_d", context__.to_vec(n));
        Eigen::Matrix<double, Eigen::Dynamic, 1> reI_raw(n);
        size_t reI_raw_j_1_max__ = n;
        for (size_t j_1__ = 0; j_1__ < reI_raw_j_1_max__; ++j_1__) {
            reI_raw(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(reI_raw);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable reI_raw: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 40;
        if (!(context__.contains_r("theta_raw")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable theta_raw missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("theta_raw");
        pos__ = 0U;
        validate_non_negative_index("theta_raw", "timedf", timedf);
        context__.validate_dims("parameter initialization", "theta_raw", "vector_d", context__.to_vec(timedf));
        Eigen::Matrix<double, Eigen::Dynamic, 1> theta_raw(timedf);
        size_t theta_raw_j_1_max__ = timedf;
        for (size_t j_1__ = 0; j_1__ < theta_raw_j_1_max__; ++j_1__) {
            theta_raw(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(theta_raw);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable theta_raw: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 41;
        if (!(context__.contains_r("sigmaG")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigmaG missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigmaG");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sigmaG", "double", context__.to_vec());
        double sigmaG(0);
        sigmaG = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sigmaG);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigmaG: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 42;
        if (!(context__.contains_r("sigmaK")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigmaK missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigmaK");
        pos__ = 0U;
        validate_non_negative_index("sigmaK", "(logical_eq(K, 0) ? 0 : 1 )", (logical_eq(K, 0) ? 0 : 1 ));
        context__.validate_dims("parameter initialization", "sigmaK", "double", context__.to_vec((logical_eq(K, 0) ? 0 : 1 )));
        std::vector<double> sigmaK((logical_eq(K, 0) ? 0 : 1 ), double(0));
        size_t sigmaK_k_0_max__ = (logical_eq(K, 0) ? 0 : 1 );
        for (size_t k_0__ = 0; k_0__ < sigmaK_k_0_max__; ++k_0__) {
            sigmaK[k_0__] = vals_r__[pos__++];
        }
        size_t sigmaK_i_0_max__ = (logical_eq(K, 0) ? 0 : 1 );
        for (size_t i_0__ = 0; i_0__ < sigmaK_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, sigmaK[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigmaK: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 43;
        if (!(context__.contains_r("sigmaI")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigmaI missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigmaI");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sigmaI", "double", context__.to_vec());
        double sigmaI(0);
        sigmaI = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sigmaI);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigmaI: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 44;
        if (!(context__.contains_r("sigmaW")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigmaW missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigmaW");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sigmaW", "double", context__.to_vec());
        double sigmaW(0);
        sigmaW = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sigmaW);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigmaW: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 45;
        if (!(context__.contains_r("sigmaTheta")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigmaTheta missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigmaTheta");
        pos__ = 0U;
        validate_non_negative_index("sigmaTheta", "(logical_eq(timedf, 0) ? 0 : 1 )", (logical_eq(timedf, 0) ? 0 : 1 ));
        context__.validate_dims("parameter initialization", "sigmaTheta", "double", context__.to_vec((logical_eq(timedf, 0) ? 0 : 1 )));
        std::vector<double> sigmaTheta((logical_eq(timedf, 0) ? 0 : 1 ), double(0));
        size_t sigmaTheta_k_0_max__ = (logical_eq(timedf, 0) ? 0 : 1 );
        for (size_t k_0__ = 0; k_0__ < sigmaTheta_k_0_max__; ++k_0__) {
            sigmaTheta[k_0__] = vals_r__[pos__++];
        }
        size_t sigmaTheta_i_0_max__ = (logical_eq(timedf, 0) ? 0 : 1 );
        for (size_t i_0__ = 0; i_0__ < sigmaTheta_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, sigmaTheta[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigmaTheta: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 37;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> etaG_raw;
            (void) etaG_raw;  // dummy to suppress unused var warning
            if (jacobian__)
                etaG_raw = in__.vector_constrain(G, lp__);
            else
                etaG_raw = in__.vector_constrain(G);
            current_statement_begin__ = 38;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> reK_raw;
            (void) reK_raw;  // dummy to suppress unused var warning
            if (jacobian__)
                reK_raw = in__.vector_constrain(K, lp__);
            else
                reK_raw = in__.vector_constrain(K);
            current_statement_begin__ = 39;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> reI_raw;
            (void) reI_raw;  // dummy to suppress unused var warning
            if (jacobian__)
                reI_raw = in__.vector_constrain(n, lp__);
            else
                reI_raw = in__.vector_constrain(n);
            current_statement_begin__ = 40;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> theta_raw;
            (void) theta_raw;  // dummy to suppress unused var warning
            if (jacobian__)
                theta_raw = in__.vector_constrain(timedf, lp__);
            else
                theta_raw = in__.vector_constrain(timedf);
            current_statement_begin__ = 41;
            local_scalar_t__ sigmaG;
            (void) sigmaG;  // dummy to suppress unused var warning
            if (jacobian__)
                sigmaG = in__.scalar_lb_constrain(0, lp__);
            else
                sigmaG = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 42;
            std::vector<local_scalar_t__> sigmaK;
            size_t sigmaK_d_0_max__ = (logical_eq(K, 0) ? 0 : 1 );
            sigmaK.reserve(sigmaK_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < sigmaK_d_0_max__; ++d_0__) {
                if (jacobian__)
                    sigmaK.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    sigmaK.push_back(in__.scalar_lb_constrain(0));
            }
            current_statement_begin__ = 43;
            local_scalar_t__ sigmaI;
            (void) sigmaI;  // dummy to suppress unused var warning
            if (jacobian__)
                sigmaI = in__.scalar_lb_constrain(0, lp__);
            else
                sigmaI = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 44;
            local_scalar_t__ sigmaW;
            (void) sigmaW;  // dummy to suppress unused var warning
            if (jacobian__)
                sigmaW = in__.scalar_lb_constrain(0, lp__);
            else
                sigmaW = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 45;
            std::vector<local_scalar_t__> sigmaTheta;
            size_t sigmaTheta_d_0_max__ = (logical_eq(timedf, 0) ? 0 : 1 );
            sigmaTheta.reserve(sigmaTheta_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < sigmaTheta_d_0_max__; ++d_0__) {
                if (jacobian__)
                    sigmaTheta.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    sigmaTheta.push_back(in__.scalar_lb_constrain(0));
            }
            // transformed parameters
            current_statement_begin__ = 48;
            validate_non_negative_index("muW", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> muW(N);
            stan::math::initialize(muW, DUMMY_VAR__);
            stan::math::fill(muW, DUMMY_VAR__);
            current_statement_begin__ = 49;
            validate_non_negative_index("etaG", "G", G);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> etaG(G);
            stan::math::initialize(etaG, DUMMY_VAR__);
            stan::math::fill(etaG, DUMMY_VAR__);
            current_statement_begin__ = 50;
            validate_non_negative_index("reK", "K", K);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> reK(K);
            stan::math::initialize(reK, DUMMY_VAR__);
            stan::math::fill(reK, DUMMY_VAR__);
            current_statement_begin__ = 51;
            validate_non_negative_index("reI", "n", n);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> reI(n);
            stan::math::initialize(reI, DUMMY_VAR__);
            stan::math::fill(reI, DUMMY_VAR__);
            current_statement_begin__ = 52;
            validate_non_negative_index("theta", "timedf", timedf);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> theta(timedf);
            stan::math::initialize(theta, DUMMY_VAR__);
            stan::math::fill(theta, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 53;
            stan::math::assign(etaG, add(prior_etaG_mean, multiply(sigmaG, etaG_raw)));
            current_statement_begin__ = 54;
            stan::math::assign(reI, add(prior_reI_mean, multiply(sigmaI, reI_raw)));
            current_statement_begin__ = 55;
            stan::math::assign(muW, add(stan::model::rvalue(etaG, stan::model::cons_list(stan::model::index_multi(group_of_obs), stan::model::nil_index_list()), "etaG"), stan::model::rvalue(reI, stan::model::cons_list(stan::model::index_multi(unit_of_obs), stan::model::nil_index_list()), "reI")));
            current_statement_begin__ = 56;
            if (as_bool(logical_gt(K, 0))) {
                current_statement_begin__ = 57;
                stan::math::assign(reK, add(prior_reK_mean, multiply(get_base1(sigmaK, 1, "sigmaK", 1), reK_raw)));
                current_statement_begin__ = 58;
                stan::math::assign(muW, add(muW, stan::model::rvalue(reK, stan::model::cons_list(stan::model::index_multi(cluster_of_obs), stan::model::nil_index_list()), "reK")));
            }
            current_statement_begin__ = 60;
            if (as_bool(logical_gt(timedf, 0))) {
                current_statement_begin__ = 61;
                stan::math::assign(theta, add(prior_theta_mean, multiply(get_base1(sigmaTheta, 1, "sigmaTheta", 1), theta_raw)));
                current_statement_begin__ = 62;
                stan::math::assign(muW, add(muW, multiply(Mt, theta)));
            }
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 48;
            size_t muW_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < muW_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(muW(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: muW" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable muW: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 49;
            size_t etaG_j_1_max__ = G;
            for (size_t j_1__ = 0; j_1__ < etaG_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(etaG(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: etaG" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable etaG: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 50;
            size_t reK_j_1_max__ = K;
            for (size_t j_1__ = 0; j_1__ < reK_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(reK(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: reK" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable reK: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 51;
            size_t reI_j_1_max__ = n;
            for (size_t j_1__ = 0; j_1__ < reI_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(reI(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: reI" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable reI: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 52;
            size_t theta_j_1_max__ = timedf;
            for (size_t j_1__ = 0; j_1__ < theta_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(theta(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: theta" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable theta: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            // model body
            current_statement_begin__ = 66;
            if (as_bool(logical_gt(timedf, 0))) {
                current_statement_begin__ = 67;
                lp_accum__.add(normal_log(theta_raw, 0, 1));
                current_statement_begin__ = 68;
                lp_accum__.add(normal_log(sigmaTheta, prior_sigmaTheta_mean, prior_sigmaTheta_sd));
            }
            current_statement_begin__ = 70;
            if (as_bool(logical_gt(K, 0))) {
                current_statement_begin__ = 71;
                lp_accum__.add(normal_log(reK_raw, 0, 1));
                current_statement_begin__ = 72;
                lp_accum__.add(normal_log(sigmaK, prior_sigmaK_mean, prior_sigmaK_sd));
            }
            current_statement_begin__ = 74;
            lp_accum__.add(normal_log(sigmaI, prior_sigmaI_mean, prior_sigmaI_sd));
            current_statement_begin__ = 75;
            lp_accum__.add(normal_log(reI_raw, 0, 1));
            current_statement_begin__ = 76;
            lp_accum__.add(normal_log(sigmaG, prior_sigmaG_mean, prior_sigmaG_sd));
            current_statement_begin__ = 77;
            lp_accum__.add(normal_log(etaG_raw, 0, 1));
            current_statement_begin__ = 78;
            lp_accum__.add(normal_log(sigmaW, prior_sigmaW_mean, prior_sigmaW_sd));
            current_statement_begin__ = 79;
            lp_accum__.add(normal_log(w, muW, sigmaW));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("etaG_raw");
        names__.push_back("reK_raw");
        names__.push_back("reI_raw");
        names__.push_back("theta_raw");
        names__.push_back("sigmaG");
        names__.push_back("sigmaK");
        names__.push_back("sigmaI");
        names__.push_back("sigmaW");
        names__.push_back("sigmaTheta");
        names__.push_back("muW");
        names__.push_back("etaG");
        names__.push_back("reK");
        names__.push_back("reI");
        names__.push_back("theta");
        names__.push_back("sigma2I");
        names__.push_back("sigma2W");
        names__.push_back("sigma2G");
        names__.push_back("sigma2K");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(G);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(timedf);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((logical_eq(K, 0) ? 0 : 1 ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((logical_eq(timedf, 0) ? 0 : 1 ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(G);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(timedf);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((logical_eq(K, 0) ? 0 : 1 ));
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_exposure_model_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        Eigen::Matrix<double, Eigen::Dynamic, 1> etaG_raw = in__.vector_constrain(G);
        size_t etaG_raw_j_1_max__ = G;
        for (size_t j_1__ = 0; j_1__ < etaG_raw_j_1_max__; ++j_1__) {
            vars__.push_back(etaG_raw(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> reK_raw = in__.vector_constrain(K);
        size_t reK_raw_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < reK_raw_j_1_max__; ++j_1__) {
            vars__.push_back(reK_raw(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> reI_raw = in__.vector_constrain(n);
        size_t reI_raw_j_1_max__ = n;
        for (size_t j_1__ = 0; j_1__ < reI_raw_j_1_max__; ++j_1__) {
            vars__.push_back(reI_raw(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> theta_raw = in__.vector_constrain(timedf);
        size_t theta_raw_j_1_max__ = timedf;
        for (size_t j_1__ = 0; j_1__ < theta_raw_j_1_max__; ++j_1__) {
            vars__.push_back(theta_raw(j_1__));
        }
        double sigmaG = in__.scalar_lb_constrain(0);
        vars__.push_back(sigmaG);
        std::vector<double> sigmaK;
        size_t sigmaK_d_0_max__ = (logical_eq(K, 0) ? 0 : 1 );
        sigmaK.reserve(sigmaK_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < sigmaK_d_0_max__; ++d_0__) {
            sigmaK.push_back(in__.scalar_lb_constrain(0));
        }
        size_t sigmaK_k_0_max__ = (logical_eq(K, 0) ? 0 : 1 );
        for (size_t k_0__ = 0; k_0__ < sigmaK_k_0_max__; ++k_0__) {
            vars__.push_back(sigmaK[k_0__]);
        }
        double sigmaI = in__.scalar_lb_constrain(0);
        vars__.push_back(sigmaI);
        double sigmaW = in__.scalar_lb_constrain(0);
        vars__.push_back(sigmaW);
        std::vector<double> sigmaTheta;
        size_t sigmaTheta_d_0_max__ = (logical_eq(timedf, 0) ? 0 : 1 );
        sigmaTheta.reserve(sigmaTheta_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < sigmaTheta_d_0_max__; ++d_0__) {
            sigmaTheta.push_back(in__.scalar_lb_constrain(0));
        }
        size_t sigmaTheta_k_0_max__ = (logical_eq(timedf, 0) ? 0 : 1 );
        for (size_t k_0__ = 0; k_0__ < sigmaTheta_k_0_max__; ++k_0__) {
            vars__.push_back(sigmaTheta[k_0__]);
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 48;
            validate_non_negative_index("muW", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> muW(N);
            stan::math::initialize(muW, DUMMY_VAR__);
            stan::math::fill(muW, DUMMY_VAR__);
            current_statement_begin__ = 49;
            validate_non_negative_index("etaG", "G", G);
            Eigen::Matrix<double, Eigen::Dynamic, 1> etaG(G);
            stan::math::initialize(etaG, DUMMY_VAR__);
            stan::math::fill(etaG, DUMMY_VAR__);
            current_statement_begin__ = 50;
            validate_non_negative_index("reK", "K", K);
            Eigen::Matrix<double, Eigen::Dynamic, 1> reK(K);
            stan::math::initialize(reK, DUMMY_VAR__);
            stan::math::fill(reK, DUMMY_VAR__);
            current_statement_begin__ = 51;
            validate_non_negative_index("reI", "n", n);
            Eigen::Matrix<double, Eigen::Dynamic, 1> reI(n);
            stan::math::initialize(reI, DUMMY_VAR__);
            stan::math::fill(reI, DUMMY_VAR__);
            current_statement_begin__ = 52;
            validate_non_negative_index("theta", "timedf", timedf);
            Eigen::Matrix<double, Eigen::Dynamic, 1> theta(timedf);
            stan::math::initialize(theta, DUMMY_VAR__);
            stan::math::fill(theta, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 53;
            stan::math::assign(etaG, add(prior_etaG_mean, multiply(sigmaG, etaG_raw)));
            current_statement_begin__ = 54;
            stan::math::assign(reI, add(prior_reI_mean, multiply(sigmaI, reI_raw)));
            current_statement_begin__ = 55;
            stan::math::assign(muW, add(stan::model::rvalue(etaG, stan::model::cons_list(stan::model::index_multi(group_of_obs), stan::model::nil_index_list()), "etaG"), stan::model::rvalue(reI, stan::model::cons_list(stan::model::index_multi(unit_of_obs), stan::model::nil_index_list()), "reI")));
            current_statement_begin__ = 56;
            if (as_bool(logical_gt(K, 0))) {
                current_statement_begin__ = 57;
                stan::math::assign(reK, add(prior_reK_mean, multiply(get_base1(sigmaK, 1, "sigmaK", 1), reK_raw)));
                current_statement_begin__ = 58;
                stan::math::assign(muW, add(muW, stan::model::rvalue(reK, stan::model::cons_list(stan::model::index_multi(cluster_of_obs), stan::model::nil_index_list()), "reK")));
            }
            current_statement_begin__ = 60;
            if (as_bool(logical_gt(timedf, 0))) {
                current_statement_begin__ = 61;
                stan::math::assign(theta, add(prior_theta_mean, multiply(get_base1(sigmaTheta, 1, "sigmaTheta", 1), theta_raw)));
                current_statement_begin__ = 62;
                stan::math::assign(muW, add(muW, multiply(Mt, theta)));
            }
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            // write transformed parameters
            if (include_tparams__) {
                size_t muW_j_1_max__ = N;
                for (size_t j_1__ = 0; j_1__ < muW_j_1_max__; ++j_1__) {
                    vars__.push_back(muW(j_1__));
                }
                size_t etaG_j_1_max__ = G;
                for (size_t j_1__ = 0; j_1__ < etaG_j_1_max__; ++j_1__) {
                    vars__.push_back(etaG(j_1__));
                }
                size_t reK_j_1_max__ = K;
                for (size_t j_1__ = 0; j_1__ < reK_j_1_max__; ++j_1__) {
                    vars__.push_back(reK(j_1__));
                }
                size_t reI_j_1_max__ = n;
                for (size_t j_1__ = 0; j_1__ < reI_j_1_max__; ++j_1__) {
                    vars__.push_back(reI(j_1__));
                }
                size_t theta_j_1_max__ = timedf;
                for (size_t j_1__ = 0; j_1__ < theta_j_1_max__; ++j_1__) {
                    vars__.push_back(theta(j_1__));
                }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 82;
            double sigma2I;
            (void) sigma2I;  // dummy to suppress unused var warning
            stan::math::initialize(sigma2I, DUMMY_VAR__);
            stan::math::fill(sigma2I, DUMMY_VAR__);
            current_statement_begin__ = 83;
            double sigma2W;
            (void) sigma2W;  // dummy to suppress unused var warning
            stan::math::initialize(sigma2W, DUMMY_VAR__);
            stan::math::fill(sigma2W, DUMMY_VAR__);
            current_statement_begin__ = 84;
            double sigma2G;
            (void) sigma2G;  // dummy to suppress unused var warning
            stan::math::initialize(sigma2G, DUMMY_VAR__);
            stan::math::fill(sigma2G, DUMMY_VAR__);
            current_statement_begin__ = 85;
            validate_non_negative_index("sigma2K", "(logical_eq(K, 0) ? 0 : 1 )", (logical_eq(K, 0) ? 0 : 1 ));
            std::vector<double> sigma2K((logical_eq(K, 0) ? 0 : 1 ), double(0));
            stan::math::initialize(sigma2K, DUMMY_VAR__);
            stan::math::fill(sigma2K, DUMMY_VAR__);
            // generated quantities statements
            current_statement_begin__ = 86;
            stan::math::assign(sigma2I, square(sigmaI));
            current_statement_begin__ = 87;
            stan::math::assign(sigma2W, square(sigmaW));
            current_statement_begin__ = 88;
            stan::math::assign(sigma2G, square(sigmaG));
            current_statement_begin__ = 89;
            if (as_bool(logical_gt(K, 0))) {
                current_statement_begin__ = 90;
                stan::math::assign(sigma2K, square(sigmaK));
            }
            // validate, write generated quantities
            current_statement_begin__ = 82;
            check_greater_or_equal(function__, "sigma2I", sigma2I, 0);
            vars__.push_back(sigma2I);
            current_statement_begin__ = 83;
            check_greater_or_equal(function__, "sigma2W", sigma2W, 0);
            vars__.push_back(sigma2W);
            current_statement_begin__ = 84;
            check_greater_or_equal(function__, "sigma2G", sigma2G, 0);
            vars__.push_back(sigma2G);
            current_statement_begin__ = 85;
            size_t sigma2K_i_0_max__ = (logical_eq(K, 0) ? 0 : 1 );
            for (size_t i_0__ = 0; i_0__ < sigma2K_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "sigma2K[i_0__]", sigma2K[i_0__], 0);
            }
            size_t sigma2K_k_0_max__ = (logical_eq(K, 0) ? 0 : 1 );
            for (size_t k_0__ = 0; k_0__ < sigma2K_k_0_max__; ++k_0__) {
                vars__.push_back(sigma2K[k_0__]);
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_exposure_model";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t etaG_raw_j_1_max__ = G;
        for (size_t j_1__ = 0; j_1__ < etaG_raw_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "etaG_raw" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t reK_raw_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < reK_raw_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "reK_raw" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t reI_raw_j_1_max__ = n;
        for (size_t j_1__ = 0; j_1__ < reI_raw_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "reI_raw" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t theta_raw_j_1_max__ = timedf;
        for (size_t j_1__ = 0; j_1__ < theta_raw_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "theta_raw" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigmaG";
        param_names__.push_back(param_name_stream__.str());
        size_t sigmaK_k_0_max__ = (logical_eq(K, 0) ? 0 : 1 );
        for (size_t k_0__ = 0; k_0__ < sigmaK_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigmaK" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigmaI";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigmaW";
        param_names__.push_back(param_name_stream__.str());
        size_t sigmaTheta_k_0_max__ = (logical_eq(timedf, 0) ? 0 : 1 );
        for (size_t k_0__ = 0; k_0__ < sigmaTheta_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigmaTheta" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t muW_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < muW_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "muW" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t etaG_j_1_max__ = G;
            for (size_t j_1__ = 0; j_1__ < etaG_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "etaG" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t reK_j_1_max__ = K;
            for (size_t j_1__ = 0; j_1__ < reK_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "reK" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t reI_j_1_max__ = n;
            for (size_t j_1__ = 0; j_1__ < reI_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "reI" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t theta_j_1_max__ = timedf;
            for (size_t j_1__ = 0; j_1__ < theta_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "theta" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma2I";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma2W";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma2G";
        param_names__.push_back(param_name_stream__.str());
        size_t sigma2K_k_0_max__ = (logical_eq(K, 0) ? 0 : 1 );
        for (size_t k_0__ = 0; k_0__ < sigma2K_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma2K" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t etaG_raw_j_1_max__ = G;
        for (size_t j_1__ = 0; j_1__ < etaG_raw_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "etaG_raw" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t reK_raw_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < reK_raw_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "reK_raw" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t reI_raw_j_1_max__ = n;
        for (size_t j_1__ = 0; j_1__ < reI_raw_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "reI_raw" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t theta_raw_j_1_max__ = timedf;
        for (size_t j_1__ = 0; j_1__ < theta_raw_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "theta_raw" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigmaG";
        param_names__.push_back(param_name_stream__.str());
        size_t sigmaK_k_0_max__ = (logical_eq(K, 0) ? 0 : 1 );
        for (size_t k_0__ = 0; k_0__ < sigmaK_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigmaK" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigmaI";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigmaW";
        param_names__.push_back(param_name_stream__.str());
        size_t sigmaTheta_k_0_max__ = (logical_eq(timedf, 0) ? 0 : 1 );
        for (size_t k_0__ = 0; k_0__ < sigmaTheta_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigmaTheta" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t muW_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < muW_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "muW" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t etaG_j_1_max__ = G;
            for (size_t j_1__ = 0; j_1__ < etaG_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "etaG" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t reK_j_1_max__ = K;
            for (size_t j_1__ = 0; j_1__ < reK_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "reK" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t reI_j_1_max__ = n;
            for (size_t j_1__ = 0; j_1__ < reI_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "reI" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t theta_j_1_max__ = timedf;
            for (size_t j_1__ = 0; j_1__ < theta_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "theta" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma2I";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma2W";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma2G";
        param_names__.push_back(param_name_stream__.str());
        size_t sigma2K_k_0_max__ = (logical_eq(K, 0) ? 0 : 1 );
        for (size_t k_0__ = 0; k_0__ < sigma2K_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma2K" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
}; // model
}  // namespace
typedef model_exposure_model_namespace::model_exposure_model stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
