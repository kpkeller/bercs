// Generated by rstantools.  Do not edit by hand.

/*
    bercs is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    bercs is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with bercs.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_outcome_model_continuous_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_outcome_model_continuous");
    reader.add_event(44, 44, "include", "/data/outcome_tdata.stan");
    reader.add_event(44, 0, "start", "/data/outcome_tdata.stan");
    reader.add_event(47, 3, "end", "/data/outcome_tdata.stan");
    reader.add_event(47, 45, "restart", "model_outcome_model_continuous");
    reader.add_event(64, 62, "include", "tparameters/tparameters_outcome_define.stan");
    reader.add_event(64, 0, "start", "tparameters/tparameters_outcome_define.stan");
    reader.add_event(69, 5, "end", "tparameters/tparameters_outcome_define.stan");
    reader.add_event(69, 63, "restart", "model_outcome_model_continuous");
    reader.add_event(70, 64, "include", "tparameters/tparameters_outcome_update.stan");
    reader.add_event(70, 0, "start", "tparameters/tparameters_outcome_update.stan");
    reader.add_event(82, 12, "end", "tparameters/tparameters_outcome_update.stan");
    reader.add_event(82, 65, "restart", "model_outcome_model_continuous");
    reader.add_event(114, 95, "end", "model_outcome_model_continuous");
    return reader;
}
#include <stan_meta_header.hpp>
class model_outcome_model_continuous
  : public stan::model::model_base_crtp<model_outcome_model_continuous> {
private:
        int S;
        int N;
        int n;
        int xdf;
        int timedf;
        int p;
        matrix_d Z;
        matrix_d Mx;
        matrix_d Mt;
        std::vector<double> y;
        std::vector<int> nT;
        std::vector<int> unit_of_obs;
        std::vector<int> study_of_unit;
        double prior_sigmaI_mean;
        double prior_sigmaI_sd;
        double prior_delta_mean;
        double prior_sigmaDelta_mean;
        double prior_sigmaDelta_sd;
        double prior_gamma_mean;
        double prior_sigmaGamma_mean;
        double prior_sigmaGamma_sd;
        double prior_sigma_y_mean;
        double prior_sigma_y_sd;
        double prior_beta_mean;
        double prior_sigmaBeta_mean;
        double prior_sigmaBeta_sd;
        std::vector<int> study_of_obs;
public:
    model_outcome_model_continuous(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_outcome_model_continuous(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_outcome_model_continuous_namespace::model_outcome_model_continuous";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 8;
            context__.validate_dims("data initialization", "S", "int", context__.to_vec());
            S = int(0);
            vals_i__ = context__.vals_i("S");
            pos__ = 0;
            S = vals_i__[pos__++];
            check_greater_or_equal(function__, "S", S, 1);
            current_statement_begin__ = 9;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            check_greater_or_equal(function__, "N", N, 1);
            current_statement_begin__ = 10;
            context__.validate_dims("data initialization", "n", "int", context__.to_vec());
            n = int(0);
            vals_i__ = context__.vals_i("n");
            pos__ = 0;
            n = vals_i__[pos__++];
            check_greater_or_equal(function__, "n", n, 1);
            current_statement_begin__ = 11;
            context__.validate_dims("data initialization", "xdf", "int", context__.to_vec());
            xdf = int(0);
            vals_i__ = context__.vals_i("xdf");
            pos__ = 0;
            xdf = vals_i__[pos__++];
            check_greater_or_equal(function__, "xdf", xdf, 0);
            current_statement_begin__ = 12;
            context__.validate_dims("data initialization", "timedf", "int", context__.to_vec());
            timedf = int(0);
            vals_i__ = context__.vals_i("timedf");
            pos__ = 0;
            timedf = vals_i__[pos__++];
            check_greater_or_equal(function__, "timedf", timedf, 0);
            current_statement_begin__ = 13;
            context__.validate_dims("data initialization", "p", "int", context__.to_vec());
            p = int(0);
            vals_i__ = context__.vals_i("p");
            pos__ = 0;
            p = vals_i__[pos__++];
            check_greater_or_equal(function__, "p", p, 0);
            current_statement_begin__ = 16;
            validate_non_negative_index("Z", "(logical_eq(p, 0) ? 0 : N )", (logical_eq(p, 0) ? 0 : N ));
            validate_non_negative_index("Z", "p", p);
            context__.validate_dims("data initialization", "Z", "matrix_d", context__.to_vec((logical_eq(p, 0) ? 0 : N ),p));
            Z = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>((logical_eq(p, 0) ? 0 : N ), p);
            vals_r__ = context__.vals_r("Z");
            pos__ = 0;
            size_t Z_j_2_max__ = p;
            size_t Z_j_1_max__ = (logical_eq(p, 0) ? 0 : N );
            for (size_t j_2__ = 0; j_2__ < Z_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < Z_j_1_max__; ++j_1__) {
                    Z(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 17;
            validate_non_negative_index("Mx", "N", N);
            validate_non_negative_index("Mx", "xdf", xdf);
            context__.validate_dims("data initialization", "Mx", "matrix_d", context__.to_vec(N,xdf));
            Mx = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(N, xdf);
            vals_r__ = context__.vals_r("Mx");
            pos__ = 0;
            size_t Mx_j_2_max__ = xdf;
            size_t Mx_j_1_max__ = N;
            for (size_t j_2__ = 0; j_2__ < Mx_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < Mx_j_1_max__; ++j_1__) {
                    Mx(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 18;
            validate_non_negative_index("Mt", "(logical_eq(timedf, 0) ? 0 : N )", (logical_eq(timedf, 0) ? 0 : N ));
            validate_non_negative_index("Mt", "timedf", timedf);
            context__.validate_dims("data initialization", "Mt", "matrix_d", context__.to_vec((logical_eq(timedf, 0) ? 0 : N ),timedf));
            Mt = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>((logical_eq(timedf, 0) ? 0 : N ), timedf);
            vals_r__ = context__.vals_r("Mt");
            pos__ = 0;
            size_t Mt_j_2_max__ = timedf;
            size_t Mt_j_1_max__ = (logical_eq(timedf, 0) ? 0 : N );
            for (size_t j_2__ = 0; j_2__ < Mt_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < Mt_j_1_max__; ++j_1__) {
                    Mt(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 19;
            validate_non_negative_index("y", "N", N);
            context__.validate_dims("data initialization", "y", "double", context__.to_vec(N));
            y = std::vector<double>(N, double(0));
            vals_r__ = context__.vals_r("y");
            pos__ = 0;
            size_t y_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < y_k_0_max__; ++k_0__) {
                y[k_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 20;
            validate_non_negative_index("nT", "N", N);
            context__.validate_dims("data initialization", "nT", "int", context__.to_vec(N));
            nT = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("nT");
            pos__ = 0;
            size_t nT_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < nT_k_0_max__; ++k_0__) {
                nT[k_0__] = vals_i__[pos__++];
            }
            size_t nT_i_0_max__ = N;
            for (size_t i_0__ = 0; i_0__ < nT_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "nT[i_0__]", nT[i_0__], 0);
            }
            current_statement_begin__ = 21;
            validate_non_negative_index("unit_of_obs", "N", N);
            context__.validate_dims("data initialization", "unit_of_obs", "int", context__.to_vec(N));
            unit_of_obs = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("unit_of_obs");
            pos__ = 0;
            size_t unit_of_obs_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < unit_of_obs_k_0_max__; ++k_0__) {
                unit_of_obs[k_0__] = vals_i__[pos__++];
            }
            size_t unit_of_obs_i_0_max__ = N;
            for (size_t i_0__ = 0; i_0__ < unit_of_obs_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "unit_of_obs[i_0__]", unit_of_obs[i_0__], 1);
                check_less_or_equal(function__, "unit_of_obs[i_0__]", unit_of_obs[i_0__], n);
            }
            current_statement_begin__ = 22;
            validate_non_negative_index("study_of_unit", "n", n);
            context__.validate_dims("data initialization", "study_of_unit", "int", context__.to_vec(n));
            study_of_unit = std::vector<int>(n, int(0));
            vals_i__ = context__.vals_i("study_of_unit");
            pos__ = 0;
            size_t study_of_unit_k_0_max__ = n;
            for (size_t k_0__ = 0; k_0__ < study_of_unit_k_0_max__; ++k_0__) {
                study_of_unit[k_0__] = vals_i__[pos__++];
            }
            size_t study_of_unit_i_0_max__ = n;
            for (size_t i_0__ = 0; i_0__ < study_of_unit_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "study_of_unit[i_0__]", study_of_unit[i_0__], 1);
                check_less_or_equal(function__, "study_of_unit[i_0__]", study_of_unit[i_0__], S);
            }
            current_statement_begin__ = 28;
            context__.validate_dims("data initialization", "prior_sigmaI_mean", "double", context__.to_vec());
            prior_sigmaI_mean = double(0);
            vals_r__ = context__.vals_r("prior_sigmaI_mean");
            pos__ = 0;
            prior_sigmaI_mean = vals_r__[pos__++];
            current_statement_begin__ = 29;
            context__.validate_dims("data initialization", "prior_sigmaI_sd", "double", context__.to_vec());
            prior_sigmaI_sd = double(0);
            vals_r__ = context__.vals_r("prior_sigmaI_sd");
            pos__ = 0;
            prior_sigmaI_sd = vals_r__[pos__++];
            check_greater_or_equal(function__, "prior_sigmaI_sd", prior_sigmaI_sd, 0);
            current_statement_begin__ = 30;
            context__.validate_dims("data initialization", "prior_delta_mean", "double", context__.to_vec());
            prior_delta_mean = double(0);
            vals_r__ = context__.vals_r("prior_delta_mean");
            pos__ = 0;
            prior_delta_mean = vals_r__[pos__++];
            current_statement_begin__ = 31;
            context__.validate_dims("data initialization", "prior_sigmaDelta_mean", "double", context__.to_vec());
            prior_sigmaDelta_mean = double(0);
            vals_r__ = context__.vals_r("prior_sigmaDelta_mean");
            pos__ = 0;
            prior_sigmaDelta_mean = vals_r__[pos__++];
            current_statement_begin__ = 32;
            context__.validate_dims("data initialization", "prior_sigmaDelta_sd", "double", context__.to_vec());
            prior_sigmaDelta_sd = double(0);
            vals_r__ = context__.vals_r("prior_sigmaDelta_sd");
            pos__ = 0;
            prior_sigmaDelta_sd = vals_r__[pos__++];
            check_greater_or_equal(function__, "prior_sigmaDelta_sd", prior_sigmaDelta_sd, 0);
            current_statement_begin__ = 33;
            context__.validate_dims("data initialization", "prior_gamma_mean", "double", context__.to_vec());
            prior_gamma_mean = double(0);
            vals_r__ = context__.vals_r("prior_gamma_mean");
            pos__ = 0;
            prior_gamma_mean = vals_r__[pos__++];
            current_statement_begin__ = 34;
            context__.validate_dims("data initialization", "prior_sigmaGamma_mean", "double", context__.to_vec());
            prior_sigmaGamma_mean = double(0);
            vals_r__ = context__.vals_r("prior_sigmaGamma_mean");
            pos__ = 0;
            prior_sigmaGamma_mean = vals_r__[pos__++];
            current_statement_begin__ = 35;
            context__.validate_dims("data initialization", "prior_sigmaGamma_sd", "double", context__.to_vec());
            prior_sigmaGamma_sd = double(0);
            vals_r__ = context__.vals_r("prior_sigmaGamma_sd");
            pos__ = 0;
            prior_sigmaGamma_sd = vals_r__[pos__++];
            check_greater_or_equal(function__, "prior_sigmaGamma_sd", prior_sigmaGamma_sd, 0);
            current_statement_begin__ = 37;
            context__.validate_dims("data initialization", "prior_sigma_y_mean", "double", context__.to_vec());
            prior_sigma_y_mean = double(0);
            vals_r__ = context__.vals_r("prior_sigma_y_mean");
            pos__ = 0;
            prior_sigma_y_mean = vals_r__[pos__++];
            check_greater_or_equal(function__, "prior_sigma_y_mean", prior_sigma_y_mean, 0);
            current_statement_begin__ = 38;
            context__.validate_dims("data initialization", "prior_sigma_y_sd", "double", context__.to_vec());
            prior_sigma_y_sd = double(0);
            vals_r__ = context__.vals_r("prior_sigma_y_sd");
            pos__ = 0;
            prior_sigma_y_sd = vals_r__[pos__++];
            check_greater_or_equal(function__, "prior_sigma_y_sd", prior_sigma_y_sd, 0);
            current_statement_begin__ = 40;
            context__.validate_dims("data initialization", "prior_beta_mean", "double", context__.to_vec());
            prior_beta_mean = double(0);
            vals_r__ = context__.vals_r("prior_beta_mean");
            pos__ = 0;
            prior_beta_mean = vals_r__[pos__++];
            current_statement_begin__ = 41;
            context__.validate_dims("data initialization", "prior_sigmaBeta_mean", "double", context__.to_vec());
            prior_sigmaBeta_mean = double(0);
            vals_r__ = context__.vals_r("prior_sigmaBeta_mean");
            pos__ = 0;
            prior_sigmaBeta_mean = vals_r__[pos__++];
            current_statement_begin__ = 42;
            context__.validate_dims("data initialization", "prior_sigmaBeta_sd", "double", context__.to_vec());
            prior_sigmaBeta_sd = double(0);
            vals_r__ = context__.vals_r("prior_sigmaBeta_sd");
            pos__ = 0;
            prior_sigmaBeta_sd = vals_r__[pos__++];
            check_greater_or_equal(function__, "prior_sigmaBeta_sd", prior_sigmaBeta_sd, 0);
            // initialize transformed data variables
            current_statement_begin__ = 46;
            validate_non_negative_index("study_of_obs", "N", N);
            study_of_obs = std::vector<int>(N, int(0));
            stan::math::fill(study_of_obs, std::numeric_limits<int>::min());
            // execute transformed data statements
            current_statement_begin__ = 47;
            stan::math::assign(study_of_obs, stan::model::rvalue(study_of_unit, stan::model::cons_list(stan::model::index_multi(unit_of_obs), stan::model::nil_index_list()), "study_of_unit"));
            // validate transformed data
            current_statement_begin__ = 46;
            size_t study_of_obs_i_0_max__ = N;
            for (size_t i_0__ = 0; i_0__ < study_of_obs_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "study_of_obs[i_0__]", study_of_obs[i_0__], 1);
                check_less_or_equal(function__, "study_of_obs[i_0__]", study_of_obs[i_0__], S);
            }
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 51;
            num_params_r__ += 1;
            current_statement_begin__ = 52;
            validate_non_negative_index("sigmaGamma", "(logical_eq(p, 0) ? 0 : 1 )", (logical_eq(p, 0) ? 0 : 1 ));
            num_params_r__ += (1 * (logical_eq(p, 0) ? 0 : 1 ));
            current_statement_begin__ = 53;
            validate_non_negative_index("sigmaDelta", "(logical_eq(timedf, 0) ? 0 : 1 )", (logical_eq(timedf, 0) ? 0 : 1 ));
            num_params_r__ += (1 * (logical_eq(timedf, 0) ? 0 : 1 ));
            current_statement_begin__ = 54;
            validate_non_negative_index("bS", "S", S);
            num_params_r__ += S;
            current_statement_begin__ = 55;
            validate_non_negative_index("gamma_raw", "p", p);
            num_params_r__ += p;
            current_statement_begin__ = 56;
            validate_non_negative_index("delta_raw", "timedf", timedf);
            num_params_r__ += timedf;
            current_statement_begin__ = 57;
            validate_non_negative_index("reI_raw", "n", n);
            num_params_r__ += n;
            current_statement_begin__ = 59;
            num_params_r__ += 1;
            current_statement_begin__ = 60;
            validate_non_negative_index("beta_raw", "xdf", xdf);
            num_params_r__ += xdf;
            current_statement_begin__ = 62;
            num_params_r__ += 1;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_outcome_model_continuous() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 51;
        if (!(context__.contains_r("sigmaI")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigmaI missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigmaI");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sigmaI", "double", context__.to_vec());
        double sigmaI(0);
        sigmaI = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sigmaI);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigmaI: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 52;
        if (!(context__.contains_r("sigmaGamma")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigmaGamma missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigmaGamma");
        pos__ = 0U;
        validate_non_negative_index("sigmaGamma", "(logical_eq(p, 0) ? 0 : 1 )", (logical_eq(p, 0) ? 0 : 1 ));
        context__.validate_dims("parameter initialization", "sigmaGamma", "double", context__.to_vec((logical_eq(p, 0) ? 0 : 1 )));
        std::vector<double> sigmaGamma((logical_eq(p, 0) ? 0 : 1 ), double(0));
        size_t sigmaGamma_k_0_max__ = (logical_eq(p, 0) ? 0 : 1 );
        for (size_t k_0__ = 0; k_0__ < sigmaGamma_k_0_max__; ++k_0__) {
            sigmaGamma[k_0__] = vals_r__[pos__++];
        }
        size_t sigmaGamma_i_0_max__ = (logical_eq(p, 0) ? 0 : 1 );
        for (size_t i_0__ = 0; i_0__ < sigmaGamma_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, sigmaGamma[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigmaGamma: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 53;
        if (!(context__.contains_r("sigmaDelta")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigmaDelta missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigmaDelta");
        pos__ = 0U;
        validate_non_negative_index("sigmaDelta", "(logical_eq(timedf, 0) ? 0 : 1 )", (logical_eq(timedf, 0) ? 0 : 1 ));
        context__.validate_dims("parameter initialization", "sigmaDelta", "double", context__.to_vec((logical_eq(timedf, 0) ? 0 : 1 )));
        std::vector<double> sigmaDelta((logical_eq(timedf, 0) ? 0 : 1 ), double(0));
        size_t sigmaDelta_k_0_max__ = (logical_eq(timedf, 0) ? 0 : 1 );
        for (size_t k_0__ = 0; k_0__ < sigmaDelta_k_0_max__; ++k_0__) {
            sigmaDelta[k_0__] = vals_r__[pos__++];
        }
        size_t sigmaDelta_i_0_max__ = (logical_eq(timedf, 0) ? 0 : 1 );
        for (size_t i_0__ = 0; i_0__ < sigmaDelta_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, sigmaDelta[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigmaDelta: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 54;
        if (!(context__.contains_r("bS")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable bS missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("bS");
        pos__ = 0U;
        validate_non_negative_index("bS", "S", S);
        context__.validate_dims("parameter initialization", "bS", "vector_d", context__.to_vec(S));
        Eigen::Matrix<double, Eigen::Dynamic, 1> bS(S);
        size_t bS_j_1_max__ = S;
        for (size_t j_1__ = 0; j_1__ < bS_j_1_max__; ++j_1__) {
            bS(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(bS);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable bS: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 55;
        if (!(context__.contains_r("gamma_raw")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable gamma_raw missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("gamma_raw");
        pos__ = 0U;
        validate_non_negative_index("gamma_raw", "p", p);
        context__.validate_dims("parameter initialization", "gamma_raw", "vector_d", context__.to_vec(p));
        Eigen::Matrix<double, Eigen::Dynamic, 1> gamma_raw(p);
        size_t gamma_raw_j_1_max__ = p;
        for (size_t j_1__ = 0; j_1__ < gamma_raw_j_1_max__; ++j_1__) {
            gamma_raw(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(gamma_raw);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable gamma_raw: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 56;
        if (!(context__.contains_r("delta_raw")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable delta_raw missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("delta_raw");
        pos__ = 0U;
        validate_non_negative_index("delta_raw", "timedf", timedf);
        context__.validate_dims("parameter initialization", "delta_raw", "vector_d", context__.to_vec(timedf));
        Eigen::Matrix<double, Eigen::Dynamic, 1> delta_raw(timedf);
        size_t delta_raw_j_1_max__ = timedf;
        for (size_t j_1__ = 0; j_1__ < delta_raw_j_1_max__; ++j_1__) {
            delta_raw(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(delta_raw);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable delta_raw: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 57;
        if (!(context__.contains_r("reI_raw")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable reI_raw missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("reI_raw");
        pos__ = 0U;
        validate_non_negative_index("reI_raw", "n", n);
        context__.validate_dims("parameter initialization", "reI_raw", "vector_d", context__.to_vec(n));
        Eigen::Matrix<double, Eigen::Dynamic, 1> reI_raw(n);
        size_t reI_raw_j_1_max__ = n;
        for (size_t j_1__ = 0; j_1__ < reI_raw_j_1_max__; ++j_1__) {
            reI_raw(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(reI_raw);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable reI_raw: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 59;
        if (!(context__.contains_r("sigmaBeta")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigmaBeta missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigmaBeta");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sigmaBeta", "double", context__.to_vec());
        double sigmaBeta(0);
        sigmaBeta = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sigmaBeta);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigmaBeta: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 60;
        if (!(context__.contains_r("beta_raw")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta_raw missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta_raw");
        pos__ = 0U;
        validate_non_negative_index("beta_raw", "xdf", xdf);
        context__.validate_dims("parameter initialization", "beta_raw", "vector_d", context__.to_vec(xdf));
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta_raw(xdf);
        size_t beta_raw_j_1_max__ = xdf;
        for (size_t j_1__ = 0; j_1__ < beta_raw_j_1_max__; ++j_1__) {
            beta_raw(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(beta_raw);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta_raw: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 62;
        if (!(context__.contains_r("sigma_y")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma_y missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma_y");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sigma_y", "double", context__.to_vec());
        double sigma_y(0);
        sigma_y = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sigma_y);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma_y: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 51;
            local_scalar_t__ sigmaI;
            (void) sigmaI;  // dummy to suppress unused var warning
            if (jacobian__)
                sigmaI = in__.scalar_lb_constrain(0, lp__);
            else
                sigmaI = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 52;
            std::vector<local_scalar_t__> sigmaGamma;
            size_t sigmaGamma_d_0_max__ = (logical_eq(p, 0) ? 0 : 1 );
            sigmaGamma.reserve(sigmaGamma_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < sigmaGamma_d_0_max__; ++d_0__) {
                if (jacobian__)
                    sigmaGamma.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    sigmaGamma.push_back(in__.scalar_lb_constrain(0));
            }
            current_statement_begin__ = 53;
            std::vector<local_scalar_t__> sigmaDelta;
            size_t sigmaDelta_d_0_max__ = (logical_eq(timedf, 0) ? 0 : 1 );
            sigmaDelta.reserve(sigmaDelta_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < sigmaDelta_d_0_max__; ++d_0__) {
                if (jacobian__)
                    sigmaDelta.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    sigmaDelta.push_back(in__.scalar_lb_constrain(0));
            }
            current_statement_begin__ = 54;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> bS;
            (void) bS;  // dummy to suppress unused var warning
            if (jacobian__)
                bS = in__.vector_constrain(S, lp__);
            else
                bS = in__.vector_constrain(S);
            current_statement_begin__ = 55;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> gamma_raw;
            (void) gamma_raw;  // dummy to suppress unused var warning
            if (jacobian__)
                gamma_raw = in__.vector_constrain(p, lp__);
            else
                gamma_raw = in__.vector_constrain(p);
            current_statement_begin__ = 56;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> delta_raw;
            (void) delta_raw;  // dummy to suppress unused var warning
            if (jacobian__)
                delta_raw = in__.vector_constrain(timedf, lp__);
            else
                delta_raw = in__.vector_constrain(timedf);
            current_statement_begin__ = 57;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> reI_raw;
            (void) reI_raw;  // dummy to suppress unused var warning
            if (jacobian__)
                reI_raw = in__.vector_constrain(n, lp__);
            else
                reI_raw = in__.vector_constrain(n);
            current_statement_begin__ = 59;
            local_scalar_t__ sigmaBeta;
            (void) sigmaBeta;  // dummy to suppress unused var warning
            if (jacobian__)
                sigmaBeta = in__.scalar_lb_constrain(0, lp__);
            else
                sigmaBeta = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 60;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> beta_raw;
            (void) beta_raw;  // dummy to suppress unused var warning
            if (jacobian__)
                beta_raw = in__.vector_constrain(xdf, lp__);
            else
                beta_raw = in__.vector_constrain(xdf);
            current_statement_begin__ = 62;
            local_scalar_t__ sigma_y;
            (void) sigma_y;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma_y = in__.scalar_lb_constrain(0, lp__);
            else
                sigma_y = in__.scalar_lb_constrain(0);
            // transformed parameters
            current_statement_begin__ = 66;
            validate_non_negative_index("mui", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> mui(N);
            stan::math::initialize(mui, DUMMY_VAR__);
            stan::math::fill(mui, DUMMY_VAR__);
            current_statement_begin__ = 67;
            validate_non_negative_index("reI", "n", n);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> reI(n);
            stan::math::initialize(reI, DUMMY_VAR__);
            stan::math::fill(reI, DUMMY_VAR__);
            current_statement_begin__ = 68;
            validate_non_negative_index("gamma", "p", p);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> gamma(p);
            stan::math::initialize(gamma, DUMMY_VAR__);
            stan::math::fill(gamma, DUMMY_VAR__);
            current_statement_begin__ = 69;
            validate_non_negative_index("delta", "timedf", timedf);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> delta(timedf);
            stan::math::initialize(delta, DUMMY_VAR__);
            stan::math::fill(delta, DUMMY_VAR__);
            current_statement_begin__ = 70;
            validate_non_negative_index("beta", "xdf", xdf);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> beta(xdf);
            stan::math::initialize(beta, DUMMY_VAR__);
            stan::math::fill(beta, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 73;
            stan::math::assign(reI, multiply(sigmaI, reI_raw));
            current_statement_begin__ = 74;
            stan::math::assign(mui, add(stan::model::rvalue(bS, stan::model::cons_list(stan::model::index_multi(study_of_obs), stan::model::nil_index_list()), "bS"), stan::model::rvalue(reI, stan::model::cons_list(stan::model::index_multi(unit_of_obs), stan::model::nil_index_list()), "reI")));
            current_statement_begin__ = 75;
            if (as_bool(logical_gt(p, 0))) {
                current_statement_begin__ = 76;
                stan::math::assign(gamma, add(prior_gamma_mean, multiply(get_base1(sigmaGamma, 1, "sigmaGamma", 1), gamma_raw)));
                current_statement_begin__ = 77;
                stan::math::assign(mui, add(mui, multiply(Z, gamma)));
            }
            current_statement_begin__ = 79;
            if (as_bool(logical_gt(timedf, 0))) {
                current_statement_begin__ = 80;
                stan::math::assign(delta, add(prior_delta_mean, multiply(get_base1(sigmaDelta, 1, "sigmaDelta", 1), delta_raw)));
                current_statement_begin__ = 81;
                stan::math::assign(mui, add(mui, multiply(Mt, delta)));
            }
            current_statement_begin__ = 83;
            if (as_bool(logical_gt(xdf, 0))) {
                current_statement_begin__ = 84;
                stan::math::assign(beta, add(prior_beta_mean, multiply(sigmaBeta, beta_raw)));
                current_statement_begin__ = 85;
                stan::math::assign(mui, add(mui, multiply(Mx, beta)));
            }
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 66;
            size_t mui_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < mui_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(mui(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: mui" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable mui: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 67;
            size_t reI_j_1_max__ = n;
            for (size_t j_1__ = 0; j_1__ < reI_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(reI(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: reI" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable reI: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 68;
            size_t gamma_j_1_max__ = p;
            for (size_t j_1__ = 0; j_1__ < gamma_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(gamma(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: gamma" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable gamma: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 69;
            size_t delta_j_1_max__ = timedf;
            for (size_t j_1__ = 0; j_1__ < delta_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(delta(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: delta" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable delta: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 70;
            size_t beta_j_1_max__ = xdf;
            for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(beta(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: beta" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable beta: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            // model body
            current_statement_begin__ = 94;
            if (as_bool(logical_gt(p, 0))) {
                current_statement_begin__ = 95;
                lp_accum__.add(normal_log(gamma_raw, 0, 1));
                current_statement_begin__ = 96;
                lp_accum__.add(normal_log(sigmaGamma, prior_sigmaGamma_mean, prior_sigmaGamma_sd));
            }
            current_statement_begin__ = 98;
            if (as_bool(logical_gt(timedf, 0))) {
                current_statement_begin__ = 99;
                lp_accum__.add(normal_log(sigmaDelta, prior_sigmaDelta_mean, prior_sigmaDelta_sd));
                current_statement_begin__ = 100;
                lp_accum__.add(normal_log(delta_raw, 0, 1));
            }
            current_statement_begin__ = 102;
            lp_accum__.add(normal_log(reI_raw, 0, 1));
            current_statement_begin__ = 103;
            lp_accum__.add(normal_log(sigmaI, prior_sigmaI_mean, prior_sigmaI_sd));
            current_statement_begin__ = 104;
            lp_accum__.add(normal_log(sigma_y, prior_sigma_y_mean, prior_sigma_y_sd));
            current_statement_begin__ = 106;
            lp_accum__.add(normal_log(y, mui, sigma_y));
            current_statement_begin__ = 108;
            if (as_bool(logical_gt(xdf, 0))) {
                current_statement_begin__ = 109;
                lp_accum__.add(normal_log(beta_raw, 0, 1));
                current_statement_begin__ = 110;
                lp_accum__.add(normal_log(sigmaBeta, prior_sigmaBeta_mean, prior_sigmaBeta_sd));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("sigmaI");
        names__.push_back("sigmaGamma");
        names__.push_back("sigmaDelta");
        names__.push_back("bS");
        names__.push_back("gamma_raw");
        names__.push_back("delta_raw");
        names__.push_back("reI_raw");
        names__.push_back("sigmaBeta");
        names__.push_back("beta_raw");
        names__.push_back("sigma_y");
        names__.push_back("mui");
        names__.push_back("reI");
        names__.push_back("gamma");
        names__.push_back("delta");
        names__.push_back("beta");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((logical_eq(p, 0) ? 0 : 1 ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((logical_eq(timedf, 0) ? 0 : 1 ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(S);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(p);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(timedf);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(xdf);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(p);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(timedf);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(xdf);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_outcome_model_continuous_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        double sigmaI = in__.scalar_lb_constrain(0);
        vars__.push_back(sigmaI);
        std::vector<double> sigmaGamma;
        size_t sigmaGamma_d_0_max__ = (logical_eq(p, 0) ? 0 : 1 );
        sigmaGamma.reserve(sigmaGamma_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < sigmaGamma_d_0_max__; ++d_0__) {
            sigmaGamma.push_back(in__.scalar_lb_constrain(0));
        }
        size_t sigmaGamma_k_0_max__ = (logical_eq(p, 0) ? 0 : 1 );
        for (size_t k_0__ = 0; k_0__ < sigmaGamma_k_0_max__; ++k_0__) {
            vars__.push_back(sigmaGamma[k_0__]);
        }
        std::vector<double> sigmaDelta;
        size_t sigmaDelta_d_0_max__ = (logical_eq(timedf, 0) ? 0 : 1 );
        sigmaDelta.reserve(sigmaDelta_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < sigmaDelta_d_0_max__; ++d_0__) {
            sigmaDelta.push_back(in__.scalar_lb_constrain(0));
        }
        size_t sigmaDelta_k_0_max__ = (logical_eq(timedf, 0) ? 0 : 1 );
        for (size_t k_0__ = 0; k_0__ < sigmaDelta_k_0_max__; ++k_0__) {
            vars__.push_back(sigmaDelta[k_0__]);
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> bS = in__.vector_constrain(S);
        size_t bS_j_1_max__ = S;
        for (size_t j_1__ = 0; j_1__ < bS_j_1_max__; ++j_1__) {
            vars__.push_back(bS(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> gamma_raw = in__.vector_constrain(p);
        size_t gamma_raw_j_1_max__ = p;
        for (size_t j_1__ = 0; j_1__ < gamma_raw_j_1_max__; ++j_1__) {
            vars__.push_back(gamma_raw(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> delta_raw = in__.vector_constrain(timedf);
        size_t delta_raw_j_1_max__ = timedf;
        for (size_t j_1__ = 0; j_1__ < delta_raw_j_1_max__; ++j_1__) {
            vars__.push_back(delta_raw(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> reI_raw = in__.vector_constrain(n);
        size_t reI_raw_j_1_max__ = n;
        for (size_t j_1__ = 0; j_1__ < reI_raw_j_1_max__; ++j_1__) {
            vars__.push_back(reI_raw(j_1__));
        }
        double sigmaBeta = in__.scalar_lb_constrain(0);
        vars__.push_back(sigmaBeta);
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta_raw = in__.vector_constrain(xdf);
        size_t beta_raw_j_1_max__ = xdf;
        for (size_t j_1__ = 0; j_1__ < beta_raw_j_1_max__; ++j_1__) {
            vars__.push_back(beta_raw(j_1__));
        }
        double sigma_y = in__.scalar_lb_constrain(0);
        vars__.push_back(sigma_y);
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 66;
            validate_non_negative_index("mui", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> mui(N);
            stan::math::initialize(mui, DUMMY_VAR__);
            stan::math::fill(mui, DUMMY_VAR__);
            current_statement_begin__ = 67;
            validate_non_negative_index("reI", "n", n);
            Eigen::Matrix<double, Eigen::Dynamic, 1> reI(n);
            stan::math::initialize(reI, DUMMY_VAR__);
            stan::math::fill(reI, DUMMY_VAR__);
            current_statement_begin__ = 68;
            validate_non_negative_index("gamma", "p", p);
            Eigen::Matrix<double, Eigen::Dynamic, 1> gamma(p);
            stan::math::initialize(gamma, DUMMY_VAR__);
            stan::math::fill(gamma, DUMMY_VAR__);
            current_statement_begin__ = 69;
            validate_non_negative_index("delta", "timedf", timedf);
            Eigen::Matrix<double, Eigen::Dynamic, 1> delta(timedf);
            stan::math::initialize(delta, DUMMY_VAR__);
            stan::math::fill(delta, DUMMY_VAR__);
            current_statement_begin__ = 70;
            validate_non_negative_index("beta", "xdf", xdf);
            Eigen::Matrix<double, Eigen::Dynamic, 1> beta(xdf);
            stan::math::initialize(beta, DUMMY_VAR__);
            stan::math::fill(beta, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 73;
            stan::math::assign(reI, multiply(sigmaI, reI_raw));
            current_statement_begin__ = 74;
            stan::math::assign(mui, add(stan::model::rvalue(bS, stan::model::cons_list(stan::model::index_multi(study_of_obs), stan::model::nil_index_list()), "bS"), stan::model::rvalue(reI, stan::model::cons_list(stan::model::index_multi(unit_of_obs), stan::model::nil_index_list()), "reI")));
            current_statement_begin__ = 75;
            if (as_bool(logical_gt(p, 0))) {
                current_statement_begin__ = 76;
                stan::math::assign(gamma, add(prior_gamma_mean, multiply(get_base1(sigmaGamma, 1, "sigmaGamma", 1), gamma_raw)));
                current_statement_begin__ = 77;
                stan::math::assign(mui, add(mui, multiply(Z, gamma)));
            }
            current_statement_begin__ = 79;
            if (as_bool(logical_gt(timedf, 0))) {
                current_statement_begin__ = 80;
                stan::math::assign(delta, add(prior_delta_mean, multiply(get_base1(sigmaDelta, 1, "sigmaDelta", 1), delta_raw)));
                current_statement_begin__ = 81;
                stan::math::assign(mui, add(mui, multiply(Mt, delta)));
            }
            current_statement_begin__ = 83;
            if (as_bool(logical_gt(xdf, 0))) {
                current_statement_begin__ = 84;
                stan::math::assign(beta, add(prior_beta_mean, multiply(sigmaBeta, beta_raw)));
                current_statement_begin__ = 85;
                stan::math::assign(mui, add(mui, multiply(Mx, beta)));
            }
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            // write transformed parameters
            if (include_tparams__) {
                size_t mui_j_1_max__ = N;
                for (size_t j_1__ = 0; j_1__ < mui_j_1_max__; ++j_1__) {
                    vars__.push_back(mui(j_1__));
                }
                size_t reI_j_1_max__ = n;
                for (size_t j_1__ = 0; j_1__ < reI_j_1_max__; ++j_1__) {
                    vars__.push_back(reI(j_1__));
                }
                size_t gamma_j_1_max__ = p;
                for (size_t j_1__ = 0; j_1__ < gamma_j_1_max__; ++j_1__) {
                    vars__.push_back(gamma(j_1__));
                }
                size_t delta_j_1_max__ = timedf;
                for (size_t j_1__ = 0; j_1__ < delta_j_1_max__; ++j_1__) {
                    vars__.push_back(delta(j_1__));
                }
                size_t beta_j_1_max__ = xdf;
                for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
                    vars__.push_back(beta(j_1__));
                }
            }
            if (!include_gqs__) return;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_outcome_model_continuous";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigmaI";
        param_names__.push_back(param_name_stream__.str());
        size_t sigmaGamma_k_0_max__ = (logical_eq(p, 0) ? 0 : 1 );
        for (size_t k_0__ = 0; k_0__ < sigmaGamma_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigmaGamma" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t sigmaDelta_k_0_max__ = (logical_eq(timedf, 0) ? 0 : 1 );
        for (size_t k_0__ = 0; k_0__ < sigmaDelta_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigmaDelta" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t bS_j_1_max__ = S;
        for (size_t j_1__ = 0; j_1__ < bS_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "bS" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t gamma_raw_j_1_max__ = p;
        for (size_t j_1__ = 0; j_1__ < gamma_raw_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "gamma_raw" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t delta_raw_j_1_max__ = timedf;
        for (size_t j_1__ = 0; j_1__ < delta_raw_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "delta_raw" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t reI_raw_j_1_max__ = n;
        for (size_t j_1__ = 0; j_1__ < reI_raw_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "reI_raw" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigmaBeta";
        param_names__.push_back(param_name_stream__.str());
        size_t beta_raw_j_1_max__ = xdf;
        for (size_t j_1__ = 0; j_1__ < beta_raw_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta_raw" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_y";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t mui_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < mui_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mui" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t reI_j_1_max__ = n;
            for (size_t j_1__ = 0; j_1__ < reI_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "reI" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t gamma_j_1_max__ = p;
            for (size_t j_1__ = 0; j_1__ < gamma_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "gamma" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t delta_j_1_max__ = timedf;
            for (size_t j_1__ = 0; j_1__ < delta_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "delta" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t beta_j_1_max__ = xdf;
            for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigmaI";
        param_names__.push_back(param_name_stream__.str());
        size_t sigmaGamma_k_0_max__ = (logical_eq(p, 0) ? 0 : 1 );
        for (size_t k_0__ = 0; k_0__ < sigmaGamma_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigmaGamma" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t sigmaDelta_k_0_max__ = (logical_eq(timedf, 0) ? 0 : 1 );
        for (size_t k_0__ = 0; k_0__ < sigmaDelta_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigmaDelta" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t bS_j_1_max__ = S;
        for (size_t j_1__ = 0; j_1__ < bS_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "bS" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t gamma_raw_j_1_max__ = p;
        for (size_t j_1__ = 0; j_1__ < gamma_raw_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "gamma_raw" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t delta_raw_j_1_max__ = timedf;
        for (size_t j_1__ = 0; j_1__ < delta_raw_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "delta_raw" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t reI_raw_j_1_max__ = n;
        for (size_t j_1__ = 0; j_1__ < reI_raw_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "reI_raw" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigmaBeta";
        param_names__.push_back(param_name_stream__.str());
        size_t beta_raw_j_1_max__ = xdf;
        for (size_t j_1__ = 0; j_1__ < beta_raw_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta_raw" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_y";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t mui_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < mui_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mui" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t reI_j_1_max__ = n;
            for (size_t j_1__ = 0; j_1__ < reI_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "reI" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t gamma_j_1_max__ = p;
            for (size_t j_1__ = 0; j_1__ < gamma_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "gamma" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t delta_j_1_max__ = timedf;
            for (size_t j_1__ = 0; j_1__ < delta_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "delta" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t beta_j_1_max__ = xdf;
            for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
    }
}; // model
}  // namespace
typedef model_outcome_model_continuous_namespace::model_outcome_model_continuous stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
